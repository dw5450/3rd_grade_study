
////////////////////////////////////////////////////////////////
// 복사 : 주소값만 가져오는거 말고 깊은 복사를 하기 위해서
// 복사 생성자
// 복사 할당자
//이동 : 복사는 비싸니까 싸게 주소만 바꿔치고 바꾼건 왤 노운 상태롯
// 이동 생성자
// 이동 할당자

//move : 이동 시켜버롯
//////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
//2018 년 3월 19일 STL
// 책 2장 - Utility functions
//minmax class dog 만들어서 해보기

// 추가 코드 : 여기서 무슨 문제가 생기는 지 생각해보고 
//////////////////////////////////////////////////////////////////////////////

#include <iostream>
using namespace std;

class Model {
private:
	static int gid;
	int id;
	char* data = nullptr;
	size_t size = 0;
public:
	Model() :id(++gid) { cout << id << " - 디폴트 생성자" << endl; }
	explicit Model(size_t s) :size(s), id(++gid) {
		data = new char[size];
		cout << id << " - 생성자	크기 : " << size << "		주소 : " << static_cast<void*>(data) << endl;
	}
	Model(const Model& m) :id(++gid) {
		size = m.size;
		data = new char[size];
		// 깊은 복사
		memcpy(data, m.data, size);

		cout << id << " - 복사 생성자	크기 : " << size << "		주소 : " << static_cast<void*>(data) << endl;
	}
	~Model() {
		cout << id << " - 소멸자	크기 : " << size << "		주소 : " << static_cast<void*>(data) << endl;
		if (data != nullptr)
			delete[] data;
	}
	Model& operator=(const Model& m) {	// 복사할당자
		if (this == &m)
			return *this;

		size = m.size;
		if (data != nullptr) {
			delete[] data;
		}
		data = new char[size];
		memcpy(data, m.data, size);

		cout << id << " - 복사할당자	크기 : " << size << "		주소 : " << static_cast<void*>(data) << endl;
		return *this;
	}
	// 이동 생성자, 이동 할당 연산자
	Model(Model&& other) :id(++gid) {
		size = other.size;
		data = other.data;
		// 원본은 well-known 상태로 만들어주자(defaul값)
		other.size = 0;
		other.data = 0;

		cout << id << " - 이동생성자	크기 : " << size << "		주소 : " << static_cast<void*>(data) << endl;
	}
	Model& operator=(Model&& other) {
		if (this == &other)
			return *this;

		size = other.size;
		if (data != nullptr) {
			delete[] data;
		}
		data = other.data;

		// 원본은 well-known 상태로 만들어주자(defaul값)
		other.size = 0;
		other.data = 0;

		cout << id << " - 이동할당 연산자		크기 : " << size << "		주소 : " << static_cast<void*>(data) << endl;
		return *this;
	}
	friend ostream& operator<<(ostream&, const Model&);

	int getSize()const { return size; }
};
int Model::gid = 0;

int main()
{
	Model a{ 1111 };
	
	Model b = move(a);

	cout << "메인이 끝남" << endl;

};

