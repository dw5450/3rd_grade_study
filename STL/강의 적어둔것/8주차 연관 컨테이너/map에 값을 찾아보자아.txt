/////////////////////////////////////////////////////////////////////////////////////////////
//2018.04.16		STL (월 23 , 화 56)					 7주 1
//
// 5장. 연관 컨테이너												정렬하는 이유, 빨리 찾기 위해서, 정렬의 기준이 되는 것이 키
//		정렬의 기준은 <(less 연산자)
//	set				- 키 값에 따라 정렬								기본 오름 차순을 한다/ 처음 값을 넣기는 힘들지만 찾기는 좋다. 겹치지 않아!
//	map				- 키와 밸류로 구성, 키가 정렬의 기준			가수 이름 : 노래 등
//	숫자가 아닌 키값으로 값을 찾을수 있음
//	unordered_set	- 키값을 해싱하여 저장
//	unordered_map	- 키와 밸류로 구성 , 키값을 해싱하여 밸류를 저장할 곳을 지정
///////////////////////////////////////////////////////////////////////////////////////////////

#include <iostream>
#include <string>					
#include <map>
//다음 헤더는 실행시 지워야 할것입니다
#include "Model.h"							//모델을 사용할시 추가후 사용해 주세요
#include "save.h"
#include "funcSpeedCheck.h"
using namespace std;

//히어로와 전투력수치를 맵으로 만들어 보자


int main()
{
	map<string, int> m;
	m.insert(pair<string, int>("사이타마", 0));
	m.insert(make_pair("제노스", 9999));
	m.insert(pair<string, int>("손오공", 444444));
	m.emplace("나미", 33333);					//이게 편함

		//find_if 하면 다 훑어야 하니 0점	tree를 잘 사용하자고 친구
	auto itor = m.find("제노스");

	if(p!= m.end())
		cout << itor->first << "  " << itor->second << endl;
	else
		cout <"없어 안돼 돌아가" << endl;
	save("map에 값을 찾아보자아.txt");

	cout <<"m["제노스"] <<  endl;

	
}
