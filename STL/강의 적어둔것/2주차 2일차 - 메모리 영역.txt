
////////////////////////////////////////////////////////////////////
////////////////////0312 stl 2주차 첫 강의/////////////////////////
//지역 변수인 STACK에 개 10000마리는 문제 없이 생성 가능 (STACK 기본 1MB, 설정에서 변경 가능
// 하지만 1000000000마리를 생성하면 에러가 발생한다
//스텍 (지역 메모리)에는 한계가 있다
//			함수가 돌아가는 동안만 잠깐 생성 되는 데이터
//해결 방법
//1. 개를 전역에 생성하면 된다
//				숙제 - (전역변수가 메모리(실행 파일) 어떻게 생성되는 지 공부
//2. 개를 자유 메모리 공간 (HEAP)에 생성
//				숙제 - 1번과 2번의 해결책의 차이점을 알아보자
//						전역 변수 = 데이터 공간에 생김
//								프로그램을 시작 할때 데이터 영역에 할당하고 종료를 할때 까지 할당댐
//						힙 영역 = 프로그래머 할당한 메모리
//								프로그래머가 임의로 만든 메모리로 프로그래머가 임의로 만들수 있고 없앨 수 도있다
//
// 스택은 잠깐 쓰다 지우는 연습장
// 전역 변수(데이터영역)는 교과서 내용
// 힙은 내가 붙히는 스포티지 언제든 추가해서 넣으수 잇고 없앨수도 있음
//
//
//프로그램 = 하드 디스크에 있는 실행 파일을 메모리에 올려서 실행하는것
/////////////////////////////////////////////////////////////////////
#include <iostream>
#include <string>
#include <random>
#include <Windows.h>

using namespace std;

class Dog
{
private:
	int age;
	string name{};
public:
	void setAge(int n) { age = n; }
	int getAge() const { return age; }
	string getName() const { return name; }
	friend ostream & operator<< (ostream &, const Dog);
};


ostream & operator<< (ostream & os, const Dog dog)
{
	os << "이름 : " << dog.getName() << ", " << "나이 : " << dog.getAge() << endl;
	return os;
}

//Dog dogs[100000];								//전역 변수로 설정해서 에러를 수정하였다
int main()
{
	//Dog dogs[100000];								//스택 영역에 실행하면 에러가 발생한다
	int dogs_num = 10000000;						
	Dog * dogs = new Dog[dogs_num];					//자유 메모리 공간(HEAP)에 설정 하여 오류를 수정 하였다

	default_random_engine drl;								//사용할 기본 엔진 선인
	uniform_int_distribution<int>uid;						//어떻게 분포할지 선언

	//for(auto d : dogs) 는 사용 못함 // 얼마나 있는 지는 모르기 때문에
	for (int i = 0; i<dogs_num; ++i)
	{
		dogs[i].setAge(uid(drl));							//랜덤한 int형 자료를 사용하게됨
	}

	qsort(dogs, 1000, sizeof(Dog), [](const void * d1, const void * d2) -> int {
		return static_cast<const Dog *>(d1)->getAge()
			- static_cast<const Dog *>(d2)->getAge();
	});

	for (int i = 0; i<100; ++i)
	{
		cout << dogs[i];
	}

	
	//동적 할당을 하면 무조건 해제를 해주어야 함
	delete[] dogs;

	system("pause");

}


