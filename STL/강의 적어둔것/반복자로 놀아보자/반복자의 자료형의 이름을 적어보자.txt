/////////////////////////////////////////////////////////////////////////////////////////////
//2018.04.16		STL (월 23 , 화 56)					 7주 1
//
// 7장. 반복자
//		반복자의 종류에 따라 다른 점
//		반복자의 종류를 판단하고 효율적인 알고리즘을 작성하는 법
///////////////////////////////////////////////////////////////////////////////////////////////

#include <iostream>
#include <iterator>
#include <set>
#include <vector>
//다음 헤더는 실행시 지워야 할것입니다
#include "Model.h"							//모델을 사용할시 추가후 사용해 주세요
#include "save.h"
using namespace std;

template <class Iter>
void f(Iter);

template <class Iter>
void f(Iter a)
{
	typename iterator_traits<Iter>::iterator_category c;
	cout << typeid(c).name() << endl;			// 자료형의 이름
}

int main()
{
	istream_iterator<char> p(cin);
	
	f( p );		//이 함수는 반복자의 종류르를 화면에 출력한다.
	save("반복자의 자료형의 이름을 적어보자.txt");

}

/////////////////////////////////////////////////////////////////////////////////////////////
//2018.04.16		STL (월 23 , 화 56)					 7주 1
//
// 7장. 반복자
//		반복자의 종류에 따라 다른 점
//		반복자의 종류를 판단하고 효율적인 알고리즘을 작성하는 법
///////////////////////////////////////////////////////////////////////////////////////////////

#include <iostream>
#include <iterator>
#include <set>
#include <vector>
//다음 헤더는 실행시 지워야 할것입니다
#include "Model.h"							//모델을 사용할시 추가후 사용해 주세요
#include "save.h"
using namespace std;

template <class Iter>
void f(Iter);

template <class Iter>
void f(Iter a)
{
	typename iterator_traits<Iter>::iterator_category c;
	cout << typeid(c).name() << endl;			// 자료형의 이름
}

int main()
{
	//istream_iterator<char> p(cin);
	
	f( vector<int>::iterator());		//이 함수는 반복자의 종류르를 화면에 출력한다.
	save("반복자의 자료형의 이름을 적어보자.txt");

}
