
////////////////////////////////////////////////////
//정수 1000개를 만들어 파일에 기록하라(4000byte를 기록하자)


//다음 시간 - 정수 말고 파일에 있는 Dog를 읽어와서 정렬해보자
//숙제 - 책 2장에 어떤 내용이 있는 지 읽어보자
//////////////////////////////////////////////////////////
////////////////////////////////////////////////////
//정수 1000개를 만들어 파일에 기록하라(4000byte를 기록하자)
//	--> 메모리를 바이트를 그대로 write 함수로 기록하면 된다
//	? 4000 바이트를 예상했는데 4010bvte가 기록 되었다?
//	10바이트는 어디서?
// ios::binary 처리
//	--> 바이너리 모드와 텍스트 모드의 차이 때문에 10바이트가 더 기록됨
//////////////////////////////////////////////////////////


#include <iostream>
#include <fstream>
#include <random>
#include "save.h"
#include <algorithm>

using namespace std;

uniform_int_distribution <> uid(0, 100);
default_random_engine dre;

class Dog
{
	int age;
	char name[10] = "unknown";

public:
	Dog()
	{
		age = uid(dre);
	}
	int getAge() const { return age; }

};

//파일 정수  "정수 1000개 메모리 그대로 저장" 에 있는 정수 1000개를
//읽어(read) 정렬한 후 화면에 출력하라
int main()
{
	////파일 쓰기
	//Dog dogs[10000];
	//ofstream out("Dog 10000마리", ios::binary);
	//out.write((const char *)dogs, sizeof(Dog) * 10000);

	//파일 읽기

	Dog dogs[10000];

	ifstream in("Dog 10000마리", ios::binary);

	in.read((char *)dogs, sizeof(Dog) * 10000);


	//sort(어디에서, 어디까지, 어떻게)
	//메모리의 시작 끝

	sort(begin(dogs), end(dogs),
		[](const Dog & a, const Dog & b) {
		return a.getAge() < b.getAge();
	});
	

	for (int i = 0; i < 10; i++)
		cout << dogs[i].getAge() << endl;


	save();
}


